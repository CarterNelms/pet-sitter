{"version":3,"file":"pet.js","sources":["/home/carter/Documents/Code/pet-sitter/public/js/es6/pet.es6.js","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/1"],"names":[],"mappings":"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","sourcesContent":["/* exported Pet */\n/* global _, pets, petId, clamp0 */\n/* jshint unused: false */\n\nlet maxHealth = 100;\nlet maxFullness = 50;\nlet maxMood = 10;\n\nclass Pet{\n  constructor(species, speciesImg, gender, age=3, name='Pet')\n  {\n    this.id = `pet${petId++}`;\n    this.species = species;\n    this.speciesImg = `media/pictures/pets/${speciesImg}`;\n    this.gender = gender;\n    this.age = age*1;\n    this.name = name;\n\n    this.health = _.random(maxHealth/10, maxHealth);\n    this.full = _.random(maxFullness/10, maxFullness);\n    this.mood = _.random(maxMood/10, maxMood);\n  }\n\n  static find(id)\n  {\n    return _(pets).find(p=>p.id === id);\n  }\n\n  sleep()\n  {\n    let amount = _.random(1,5);\n    this.health += amount;\n\n    let lostMood = _.random(0,1);\n    this.mood -= lostMood;\n\n    this.refreshStatus();\n  }\n\n  eat()\n  {\n    let amount = _.random(1,3);\n    this.full += amount;\n\n    this.refreshStatus();\n  }\n\n  play()\n  {\n    let amount = _.random(0,1);\n    this.mood += amount;\n\n    let lostHealth = _.random(1,3);\n    let lostFullness = _.random(1,3);\n    this.health -= lostHealth;\n    this.full -= lostFullness;\n\n    this.refreshStatus();\n  }\n\n  clampStats()\n  {\n    this.health = clamp0(this.health, maxHealth);\n    this.full = clamp0(this.full, maxFullness);\n    this.mood = clamp0(this.mood, maxMood);    \n  }\n\n  render()\n  {\n    $('#pets').append(`<div data-name=${this.name} class='pet' id=${this.id}>\n                        <div class=container>\n                          <div class=flipper>\n                            <div class=back>\n                              <img src='media/pictures/dead.png'>\n                              R.I.P ${this.name}<br>\n                              ${2014-this.age} - 2014\n                            </div>\n                            <div class=front>\n                              <div class=petImgWrap>\n                                <img class=petImg src=${this.speciesImg}>\n                              </div>\n                              <div class=title>\n                                ${this.name} the ${this.species}<br>\n                                ${this.gender} - ${this.age} years old\n                                <div class=interactions>\n                                  <div class=sleep>\n                                    Sleep\n                                  </div>\n                                  <div class=eat>\n                                    Eat\n                                  </div>\n                                  <div class=play>\n                                    Play\n                                  </div>\n                                </div>\n                              </div>\n                              <div class=status>\n                                <div class=statusName>Health </div><div class=statusBarWrap><div class='statusBar healthBar' data-val=${this.health}></div></div><br>\n                                <div class=statusName>Fullness </div><div class=statusBarWrap><div class='statusBar fullnessBar' data-val=${this.full}></div></div><br>\n                                <div class=statusName>Mood </div><div class=statusBarWrap><div class='statusBar moodBar' data-val=${this.mood}></div></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>`);\n   this.refreshStatus();\n  }\n\n  refreshStatus()\n  {\n    this.clampStats();\n    let $petDiv = $('#'+this.id);\n    let $healthBar = $petDiv.find('.healthBar');\n    let $fullnessBar = $petDiv.find('.fullnessBar');\n    let $moodBar = $petDiv.find('.moodBar');\n\n    let healthPercent = (this.health/maxHealth)*100;\n    let fullnessPercent = (this.full/maxFullness)*100;\n    let moodPercent = (this.mood/maxMood)*100;\n\n    $healthBar.css('width', `${healthPercent}%`);\n    $fullnessBar.css('width', `${fullnessPercent}%`);\n    $moodBar.css('width', `${moodPercent}%`);\n\n    setColor($healthBar, healthPercent);\n    setColor($fullnessBar, fullnessPercent);\n    setColor($moodBar, moodPercent);\n\n    function setColor($bar, percent)\n    {\n      if(percent < 30)\n      {\n        $bar.css('background-color', 'red');\n      }\n      else if(percent < 60)\n      {\n        $bar.css('background-color', 'yellow');\n      }\n      else\n      {\n        $bar.css('background-color', 'green');\n      }\n    }\n\n    if(healthPercent <= 0 || fullnessPercent <= 0)\n    {\n      this.death();\n    }\n  }\n\n  death()\n  {\n    let $petDiv = $('#'+this.id);\n    let $flipper = $petDiv.find('.flipper');\n    $flipper.addClass('dead');\n  }\n}","var $__placeholder__0 = $__placeholder__1","($traceurRuntime.createClass)($__placeholder__0, $__placeholder__1, $__placeholder__2)"]}